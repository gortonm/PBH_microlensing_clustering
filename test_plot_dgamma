#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Feb 11 15:17:12 2022

@author: ppxmg2
"""

import numpy as np
import matplotlib.pyplot as plt
import halomodel_optimised as hm
import os

# Range of PBH masses to consider
#m_pbhs = 10**np.arange(-1, 3.1, 1)
m_pbhs = 10**np.arange(0, 0.1, 1)

# Range of numbers of PBHs per cluster to consider
#n_cls = 10**np.arange(3, 7.1, 1.)
n_cls = 10**np.arange(3, 3.1, 1.)

# Number of realisations for each PBH mass and cluster size
n_realisations = 1

# Maximum value of the event duration distribution to include, in days
upper = 2000 / 365.25

"""Calculate the number of expected events, given a sample of cluster distances and speeds"""
for m_pbh in m_pbhs:
    
    # import relevant comparison curve for the event duration distribution
    filepath = f'{os.getcwd()}' + '/data_files/event_duration_dist_step=0.50_mpbh={:.2f}'.format(np.log10(m_pbh)) + '.txt'
    t_smooth, dgamma_smooth = np.loadtxt(filepath, delimiter = ',')
    
    print(np.trapz(dgamma_smooth, np.array(t_smooth)/365.25))
    
    for n_cl in n_cls:
        
        setup = hm.Halomodel(m_pbh=m_pbh, n_cl=n_cl)
        
        for i in range(n_realisations):
            filepath = f'{os.getcwd()}' + '/simulated_data_constraints/N_cl/{0:.2f}'.format(np.log10(n_cl)) + '/M_PBH/{0:.2f}/'.format(np.log10(m_pbh)) + str(i)
            d_L = np.loadtxt(filepath + '_dL.txt', delimiter=',')
            v = np.loadtxt(filepath + '_v.txt', delimiter=',')
            
            t_hat = 2 * setup.einstein_radius(d_L) / v
            gamma_c = setup.event_rate(d_L, v)
                        
            """Sanity check: find total value of the event rate from all contributions"""
            print('Total event rate / yr^{-1} = ' + str(np.sum(gamma_c)))
                    
            bin_spacing = upper / np.ceil((len(t_hat)**(0.5)))
            
            plt.figure()
            plt.hist(t_hat, weights = gamma_c, bins = np.arange(0, upper+bin_spacing/2, bin_spacing))
            plt.plot(np.array(t_smooth) / 365.25, np.array(dgamma_smooth) / 365.25, label = 'Smooth')
            plt.xlabel('$\hat{t}$ / yr')
            plt.ylabel(r'$\frac{\mathrm{d}\Gamma}{\mathrm{d} \hat{t}}$ / $\mathrm{yr}^{-2}$')
            plt.xlim(0, upper)

